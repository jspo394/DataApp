install.packages("shiny")
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("shiny", "rstudio")
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("shiny", "rstudio")
install.packages("shyni")
install.packages("shiny")
detach("package:base", unload = TRUE)
library(shiny)
install.packages("radiant")
install.packages("radiant")
install.packages("radiant.basics")
install.packages("radiant.basics")
install.packages("radiant.model")
install.packages("tidyverse")
install.packages("rCharts")
install.packages("rsconnect")
install.packages(c("callr", "farver", "generics", "igraph", "lme4", "processx", "Rcpp", "rlang", "stringi"))
install.packages("rCharts")
install.packages("installr", dependencies = TRUE)
library(installr)
updateR()
1
actionLink("infoLink", "Information Link", class = "btn-info")
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
sliderInput("obs", "Number of observations", 0, 1000, 500),
actionButton("goButton", "Go!", class = "btn-success"),
plotOutput("distPlot")
)
server <- function(input, output) {
output$distPlot <- renderPlot({
# Take a dependency on input$goButton. This will run once initially,
# because the value changes from NULL to 0.
input$goButton
# Use isolate() to avoid dependency on input$obs
dist <- isolate(rnorm(input$obs))
hist(dist)
})
}
shinyApp(ui, server)
}
## Example of adding extra class values
actionButton("largeButton", "Large Primary Button", class = "btn-primary btn-lg")
actionLink("infoLink", "Information Link", class = "btn-info")
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
sliderInput("obs", "Number of observations", 0, 1000, 500),
actionButton("goButton", "Go!", class = "btn-success"),
plotOutput("distPlot")
)
server <- function(input, output) {
output$distPlot <- renderPlot({
# Take a dependency on input$goButton. This will run once initially,
# because the value changes from NULL to 0.
input$goButton
# Use isolate() to avoid dependency on input$obs
dist <- isolate(rnorm(input$obs))
hist(dist)
})
}
shinyApp(ui, server)
}
# In server.R
# output$distPlot <- renderPlot({
#   # Take a dependency on input$goButton
#   input$goButton
#
#   # Use isolate() to avoid dependency on input$obs
#   dist <- isolate(rnorm(input$obs))
#   hist(dist)
# })
#
# # In ui.R
# actionButton("goButton", "Go!")
# In server.R
# output$distPlot <- renderPlot({
#   # Take a dependency on input$goButton
#   input$goButton
#
#   # Use isolate() to avoid dependency on input$obs
#   dist <- isolate(rnorm(input$obs))
#   hist(dist)
# })
#
# # In ui.R
# actionButton("goButton", "Go!")
shiny::runApp('DatApp')
runApp('DatApp')
runApp('DatApp')
runApp('DatApp')
runApp('DatApp')
runApp('DatApp')
runApp('DatApp')
runApp('DatApp')
runApp('DatApp')
shinyUI(
dashboardPage(
dashboardHeader(title = "Demo shinydashboard package - add sub menu items to sidebar - an example", titleWidth = 800),
dashboardSidebar(
sidebarMenu(id = 'sidebarmenu',
# first menu item
menuItem("Dashboard", tabName = "Dashboard", icon = icon("dashboard")),
# second menu item with 2 sub menus
menuItem('chart',
icon = icon('line-chart'),
menuSubItem('chartmenusub1',
tabName = 'chart1',
icon = icon('line-chart')),
menuSubItem('chartmenusub2',
tabName = 'chart2',
icon = icon('line-chart')
)))),
dashboardBody(
tabItems(
tabItem("Dashboard", h4("this is the Dashboard tab page")),
tabItem("chart1", h4("this is the chart1 tab page")),
tabItem("chart2", h4("this is the chart2 tab page"))
)
)
)
shinyServer(function(input, output, session){
}
)
)
library(shiny)
library(shinydashboard)
shinyUI(
dashboardPage(
dashboardHeader(title = "Demo shinydashboard package - add sub menu items to sidebar - an example", titleWidth = 800),
dashboardSidebar(
sidebarMenu(id = 'sidebarmenu',
# first menu item
menuItem("Dashboard", tabName = "Dashboard", icon = icon("dashboard")),
# second menu item with 2 sub menus
menuItem('chart',
icon = icon('line-chart'),
menuSubItem('chartmenusub1',
tabName = 'chart1',
icon = icon('line-chart')),
menuSubItem('chartmenusub2',
tabName = 'chart2',
icon = icon('line-chart')
)))),
dashboardBody(
tabItems(
tabItem("Dashboard", h4("this is the Dashboard tab page")),
tabItem("chart1", h4("this is the chart1 tab page")),
tabItem("chart2", h4("this is the chart2 tab page"))
)
)
)
shinyServer(function(input, output, session){
}
library(shiny)
library(shinydashboard)
shinyUI(
dashboardPage(
dashboardHeader(title = "Demo shinydashboard package - add sub menu items to sidebar - an example", titleWidth = 800),
dashboardSidebar(
sidebarMenu(id = 'sidebarmenu',
# first menu item
menuItem("Dashboard", tabName = "Dashboard", icon = icon("dashboard")),
# second menu item with 2 sub menus
menuItem('chart',
icon = icon('line-chart'),
menuSubItem('chartmenusub1',
tabName = 'chart1',
icon = icon('line-chart')),
menuSubItem('chartmenusub2',
tabName = 'chart2',
icon = icon('line-chart')
)))),
dashboardBody(
tabItems(
tabItem("Dashboard", h4("this is the Dashboard tab page")),
tabItem("chart1", h4("this is the chart1 tab page")),
tabItem("chart2", h4("this is the chart2 tab page"))
)
)
)
shinyServer(function(input, output, session){
}
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
shinyUI(
dashboardPage(
dashboardHeader(title = "Demo shinydashboard package - add sub menu items to sidebar - an example", titleWidth = 800),
dashboardSidebar(
sidebarMenu(id = 'sidebarmenu',
# first menu item
menuItem("Dashboard", tabName = "Dashboard", icon = icon("dashboard")),
# second menu item with 2 sub menus
menuItem('chart',
icon = icon('line-chart'),
menuSubItem('chartmenusub1',
tabName = 'chart1',
icon = icon('line-chart')),
menuSubItem('chartmenusub2',
tabName = 'chart2',
icon = icon('line-chart')
)))),
dashboardBody(
tabItems(
tabItem("Dashboard", h4("this is the Dashboard tab page")),
tabItem("chart1", h4("this is the chart1 tab page")),
tabItem("chart2", h4("this is the chart2 tab page"))
)
)
)
server <- function(input, output){
})
library(shiny)
library(shinydashboard)
shinyUI(
dashboardPage(
dashboardHeader(title = "Demo shinydashboard package - add sub menu items to sidebar - an example", titleWidth = 800),
dashboardSidebar(
sidebarMenu(id = 'sidebarmenu',
# first menu item
menuItem("Dashboard", tabName = "Dashboard", icon = icon("dashboard")),
# second menu item with 2 sub menus
menuItem('chart',
icon = icon('line-chart'),
menuSubItem('chartmenusub1',
tabName = 'chart1',
icon = icon('line-chart')),
menuSubItem('chartmenusub2',
tabName = 'chart2',
icon = icon('line-chart')
)))),
dashboardBody(
tabItems(
tabItem("Dashboard", h4("this is the Dashboard tab page")),
tabItem("chart1", h4("this is the chart1 tab page")),
tabItem("chart2", h4("this is the chart2 tab page"))
)
)
)
server <- function(input, output){
})
library(shiny)
library(shinydashboard)
shinyUI(
dashboardPage(
dashboardHeader(title = "Demo shinydashboard package - add sub menu items to sidebar - an example", titleWidth = 800),
dashboardSidebar(
sidebarMenu(id = 'sidebarmenu',
# first menu item
menuItem("Dashboard", tabName = "Dashboard", icon = icon("dashboard")),
# second menu item with 2 sub menus
menuItem('chart',
icon = icon('line-chart'),
menuSubItem('chartmenusub1',
tabName = 'chart1',
icon = icon('line-chart')),
menuSubItem('chartmenusub2',
tabName = 'chart2',
icon = icon('line-chart')
)))),
dashboardBody(
tabItems(
tabItem("Dashboard", h4("this is the Dashboard tab page")),
tabItem("chart1", h4("this is the chart1 tab page")),
tabItem("chart2", h4("this is the chart2 tab page"))
)
)
)
server <- function(input, output)
server <- function(input, output){
}
library(shiny)
library(shinydashboard)
shinyUI(
dashboardPage(
dashboardHeader(title = "Demo shinydashboard package - add sub menu items to sidebar - an example", titleWidth = 800),
dashboardSidebar(
sidebarMenu(id = 'sidebarmenu',
# first menu item
menuItem("Dashboard", tabName = "Dashboard", icon = icon("dashboard")),
# second menu item with 2 sub menus
menuItem('chart',
icon = icon('line-chart'),
menuSubItem('chartmenusub1',
tabName = 'chart1',
icon = icon('line-chart')),
menuSubItem('chartmenusub2',
tabName = 'chart2',
icon = icon('line-chart')
)))),
dashboardBody(
tabItems(
tabItem("Dashboard", h4("this is the Dashboard tab page")),
tabItem("chart1", h4("this is the chart1 tab page")),
tabItem("chart2", h4("this is the chart2 tab page"))
)
)
)
server <- function(input, output){
}
shiny(ui, server)
runApp('DatApp')
runApp('DatApp')
runApp('DatApp')
